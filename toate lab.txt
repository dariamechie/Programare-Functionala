LAB2

polly2 :: Double -> Double -> Double -> Double -> Double
polly2 a b c x = a*x*x+b*x+c

eeny :: Integer -> String
eeny x = if even x then "eeny"
    else "weeny"
fizzbuzz :: Integer -> String
fizzbuzz x = if mod x 3==0 && mod x 5 == 0
    then "FizzBuzz"
    else if mod x 3==0
        then "Fizz"
    else if mod x 5==0
        then "Buzz"
    else ""
fibonacciCazuri :: Integer -> Integer
fibonacciCazuri n
    | n < 2     = n
    | otherwise = fibonacciCazuri (n - 1) + fibonacciCazuri (n - 2)
fibonacciEcuational :: Integer -> Integer
fibonacciEcuational 0 = 0
fibonacciEcuational 1 = 1
fibonacciEcuational n =
    fibonacciEcuational (n - 1) + fibonacciEcuational (n - 2)
tribonacci :: Integer -> Integer
tribonacci n 
    | n==0  =0
    | n==1  =1
    | n==2  =1
    | n==3  =2
    | otherwise = tribonacci(n-1)+tribonacci(n-2)+tribonacci(n-3)
tribonacci2 :: Integer -> Integer
tribonacci2 1 = 1
tribonacci2 2 = 1
tribonacci2 3 = 2
tribonacci2 n = tribonacci(n-1)+tribonacci(n-2)+tribonacci(n-3)

binomial :: Integer -> Integer -> Integer
binomial n 0 = 1
binomial 0 k = 0
binomial n k = binomial (n-1) k + binomial (n-1) (k-1)

verifL :: [Int] -> Bool
verifL ls =  even (length ls)
takefinal :: [Int] -> Int -> [Int]
takefinal ls n = if(length ls)>n then drop(length ls-n) ls
                 else ls
--drop(n) sterge primele n nr din lista

remove :: [a]-> Int -> [a]
remove ls n=take n ls ++ drop(n+1) ls 

-- semiPareRec [0,2,1,7,8,56,17,18] == [0,1,4,28,9]
semiPareRec :: [Int] -> [Int]
semiPareRec [] = []
semiPareRec (h:t)
 | even h    = h `div` 2 : t'
 | otherwise = t'
 where t' = semiPareRec t

myreplicate:: Int->Int->[Int]
myreplicate n v
    |n>0 = v:ls --adaugam la inceputul listei ls pe v
    |otherwise = []
    where ls=myreplicate(n-1)v --de (n-1) ori

sumImp :: [Int] -> Int

--a)
--sumImp ls 
  --  |length ls>0 = mod(head ls)2+suma
   -- |otherwise = 0
   -- where suma=sumImp(tail ls)

--b)
sumImp []=0
sumImp(p:u)
    | even p=sumImp(u)
    | otherwise = p+sumImp(u)


totalLen :: [String] -> Int
totalLen []=0
totalLen(p:u)
    |head p=='A' = length(p) + totalLen(u)
    |otherwise = totalLen(u)














LAB3

import Data.Char
import Data.List 

--1)
isVowel :: Char -> Bool
isVowel c = elem c "aeiouAeiou"

countVowels :: [Char] -> Int
countVowels []=0
countVowels (x:xs)
    | isVowel(x) == True= 1+countVowels(xs)
    | otherwise = countVowels(xs)

nrVocale :: [String] -> Int 
nrVocale[]=0
nrVocale(x:xs)
    | x==reverse(x)=countVowels(x)+nrVocale(xs)
    | otherwise=nrVocale(xs) 

--2)
adaugaPar:: Int -> [Int] -> [Int]
adaugaPar n [] = []
adaugaPar n(x:xs)
    |even x = x:n:adaugaPar n xs
    |otherwise= x:adaugaPar n xs 

--3) 
divizori :: Int -> [Int]
divizori x = [y | y<-[1..x], x`mod`y==0] 

--4)
listadiv::[Int]->[[Int]]
listadiv [] = []
listadiv (x:xs) = [y| y<-[1..x], x `mod` y == 0] : listadiv xs

--5)

--a)

intIntervalRec :: Int -> Int -> [Int] ->[Int]
intIntervalRec st dr [] = []
intIntervalRec st dr (x:xs)
    | x <= dr && x>=st = x:intIntervalRec st dr xs
    | otherwise = intIntervalRec st dr xs

--b)

intIntervalCmp :: Int -> Int -> [Int] ->[Int]
intIntervalCmp st dr l=[a | a<-l, a>=st, a<=dr]

--6)
--a)

pozitiveRec :: [Int] -> Int
pozitiveRec [] = 0
pozitiveRec (x:xs)
     | x > 0 = 1 + pozitiveRec xs
     | otherwise = pozitiveRec xs
--b)
pozitiveComp :: [Int] -> Int
pozitiveComp lista = length [x | x<- lista, x>0]

--7)

index:: Int -> [Int] -> [Int]
index p [] = []
index p (x:xs)
    |odd x=p:index (p+1) xs
    |otherwise = index (p+1) xs


pozitiiImpareRec :: [Int] -> [Int]
pozitiiImpareRec ls=index 0 ls

--b)

pozitiiImpareCmp :: [Int] -> [Int]
pozitiiImpareCmp ls =[poz | (poz,x)<-zip[0..] ls, odd x]


produs :: String -> Int
produs "" = 1
produs (x:xs)
    |isDigit x == True = digitToInt x * produs xs
    |otherwise = produs xs

produs1:: String -> Int
produs1 ls = product [digitToInt x| x<- ls, isDigit x == True]









LAB4

import Data.List


--1)
factori:: Int->[Int]
factori x = [y | y<-[1..x], x `mod` y==0]

--2)
prim:: Int -> Bool
prim x = factori x == [1,x]

--3)
numerePrime:: Int -> [Int]
numerePrime n = [x |x<-[2..n], prim x]

--4)
myzip3:: [a]->[b]->[c]->[(a,b,c)]
myzip3 x y [] = []
myzip3 x [] z = []
myzip3 [] y z = []
myzip3 (x:xs) (y:ys) (z:zs) = (x,y,z) : myzip3 xs ys zs

-- map :: (a -> b) -> [a] -> [b]
-- map f xs =[f x | x <- xs]


--5)
firstEl:: [(a,b)]->[a]
firstEl = map fst 

--6)
sumList:: [[Int]]->[Int]
sumList=map sum

--7)

propr :: Int->Int 
propr x
    | odd x = x*2
    | otherwise = x `div` 2

prel2::[Int]->[Int]
prel2 = map propr 

--9)
propr1 :: Int->Int 
propr1 x
    | odd x = x*x
    | otherwise = x

ex9::[Int]->[Int]
ex9=map propr1

--10)
getSquares::[Int]->[Int]     --[7,8,67]->[(0,7), (1,8), (2,67)]
getSquares l = map((^2).snd) (filter(odd.fst) (zip [0..] l)

sqrOdd :: [Int] -> [Int]
sqrOdd l = map (^ 2) (filter odd l)

--11)

ex11::[[String]] -> [[String]]
ex11 = map(filter(`elem` "aeiouAEIOU"))


myfilter :: (a -> Bool) -> [a] -> [a]
myfilter f [] = []
myfilter f (h:t)
    |f h = h:myfilter f t
    |otherwise = myfilter f t


mymap :: (a -> b) -> [a] -> [b]
mymap f [] = []
mymap f (h:t) = (f h):mymap f t












LAB5

--1)
propr :: Int->Int 
propr x
    | odd x = x*x
    | otherwise = 0 --sa l faca 0 pt ca sa adauge 0 la suma cand o facem la linia 11

lista :: [Int]->[Int]
lista ls = map propr ls

ex1 :: [Int]->Int
ex1 ls  = sum (lista ls)

--2)

ex2 :: [Bool]->Bool
ex2 ls = foldr (&&) True ls --verificam daca toate el sunt true

--3)

allVerifies0 :: (Int -> Bool) -> [Int] -> [Bool] --returneaza o lista de bool, dupa ce aplicam propr p => 0, daca nu satisface propr, 1 daca o satisface
allVerifies0 p ls = map p ls 

allVerifies :: (Int -> Bool) -> [Int] -> Bool
allVerifies p ls = ex2 (allVerifies0 p ls)

--4) 
verif :: [Bool]->Bool
verif ls = foldr (||) False ls --Verif daca cel putin unul din ls e true => true daca e, false daca nu e

allVerifies04 :: (Int -> Bool) -> [Int] -> [Bool] --returneaza o lista de bool, dupa ce aplicam propr p => 0, daca nu satisface propr, 1 daca o satisface
allVerifies04 p ls = map p ls 

allVerifies4 :: (Int -> Bool) -> [Int] -> Bool
allVerifies4 p ls = verif (allVerifies0 p ls)

--5)

mapFoldr :: (a->b)->[a]->[b]
mapFoldr fct ls = foldr (\x lista0 -> fct x:lista0) [] ls

filterFoldr::(a->Bool)->[a]->[a]
filterFoldr f lista = foldr(\x lista01 -> if f x then x:lista01 else lista01) [] lista

--6)

functie::Int->Int->Int
functie rez x = rez*10+x

listToInt :: [Int] -> Int
listToInt ls = foldl functie 0 ls 

--7)
--a)

ex7 :: Char->String -> String
ex7 c s = filter (/= c) s -- /= inseamna diferit





LAB6

data Fruct
  = Mar String Bool
  | Portocala String Int

ionatanFaraVierme = Mar "Ionatan" False
goldenCuVierme = Mar "Golden Delicious" True
portocalaSicilia10 = Portocala "Sanguinello" 10
listaFructe = [Mar "Ionatan" False,
                Portocala "Sanguinello" 10,
                Portocala "Valencia" 22,
                Mar "Golden Delicious" True,
                Portocala "Sanguinello" 15,
                Portocala "Moro" 12,
                Portocala "Tarocco" 3,
                Portocala "Moro" 12,
                Portocala "Valencia" 2,
                Mar "Golden Delicious" False,
                Mar "Golden" False,
                Mar "Golden" True]


--1) 
--a)

ePortocalaDeSicilia :: Fruct -> Bool
ePortocalaDeSicilia(Portocala "Tarocco" _ ) = True
ePortocalaDeSicilia(Portocala "Moro" _ ) = True
ePortocalaDeSicilia(Portocala "Sanguinello" _ ) = True
ePortocalaDeSicilia(Portocala _ _ ) = False
ePortocalaDeSicilia(Mar _ _ ) = False

--var 2
-- ePortocalaDeSicilia(Portocala soi _ ) = soi `elem` ["Tarocco" , "Moro" , "Sanguinello"]
-- ePortocalaDeSicilia _ = False



test_ePortocalaDeSicilia1 =
    ePortocalaDeSicilia (Portocala "Moro" 12) == True
test_ePortocalaDeSicilia2 =
    ePortocalaDeSicilia (Mar "Ionatan" True) == False

--b)

nrFeliiSicilia :: [Fruct] -> Int
nrFeliiSicilia x = sum[nr_felii | (Portocala soi nr_felii) <-x , ePortocalaDeSicilia(Portocala soi nr_felii) == True]


test_nrFeliiSicilia = nrFeliiSicilia listaFructe == 52

--c)

eMarVierme :: Fruct -> Bool
eMarVierme (Mar _ True) = True
eMarVierme _ = False

nrMereViermi :: [Fruct] -> Int
nrMereViermi list = length [x | x <- list, eMarVierme x == True] --bagam in lista doar merele care sunt true

test_nrMereViermi = nrMereViermi listaFructe == 2

--2)

type NumeA = String
type Rasa = String
data Animal = Pisica NumeA | Caine NumeA Rasa
    deriving Show

--a)
vorbeste :: Animal -> String
vorbeste(Pisica _) = "Meow!"
vorbeste(Caine _ _) = "Woof!"

--b)
rasa :: Animal -> Maybe String
rasa(Caine _ rasa_caine) = Just rasa_caine
rasa _ = Nothing

--3)

data Linie = L [Int]
   deriving Show
data Matrice = M [Linie]
   deriving Show

--a)
verifica :: Matrice -> Int -> Bool
verifica (M mat) n = foldr (&&) True [sum linie==n | L linie <- mat] 
--verifica (M mat) n = and [sum l==n | L linie <- mat] 


test_verif1 = verifica (M[L[1,2,3], L[4,5], L[2,3,6,8], L[8,5,3]]) 10 == False
test_verif2 = verifica (M[L[2,20,3], L[4,21], L[2,3,6,8,6], L[8,5,3,9]]) 25 == True

--b)
doarPozN :: Matrice -> Int -> Bool
doarPozN (M mat) n = foldr (&&) True [ all(>0) linie | L linie <- mat, length linie==n] 

testPoz1 = doarPozN (M [L[1,2,3], L[4,5], L[2,3,6,8], L[8,5,3]]) 3 == True

testPoz2 = doarPozN (M [L[1,2,-3], L[4,5], L[2,3,6,8], L[8,5,3]]) 3 == False

--c)

linie:: Linie->[Int]
linie(L l)=l

corect :: Matrice -> Bool
corect(M []) = True
corect(M [L _])=True
corect(M(L l1 : L l2 : xs))
    |length l1 == length l2 = corect(M(L l2:xs))
    |otherwise = False

testcorect1 = corect (M[L[1,2,3], L[4,5], L[2,3,6,8], L[8,5,3]]) == False
testcorect2 = corect (M[L[1,2,3], L[4,5,8], L[3,6,8], L[8,5,3]]) == True







LAB7


data Expr = Const Int -- integer constant
          | Expr :+: Expr -- addition
          | Expr :*: Expr -- multiplication
           deriving Eq

data Operation = Add | Mult deriving (Eq, Show)

data Tree = Lf Int -- leaf
          | Node Operation Tree Tree -- branch
           deriving (Eq, Show)

--1.1)
instance Show Expr where 
  show :: Expr -> String
  show (Const i) = show i
  show (e1 :+: e2) = "(" ++ show e1 ++ " + " ++ show e2 ++ ")"
  show (e1 :*: e2) = "(" ++ show e1 ++ " * " ++ show e2 ++ ")"
    
--1.2)
evalExp :: Expr -> Int
evalExp (Const c)= c
evalExp (exp1 :+: exp2) = evalExp exp1 + evalExp exp2
evalExp (exp1 :*: exp2) = evalExp exp1 * evalExp exp2

--1.3)
evalArb :: Tree -> Int
evalArb (Lf a) = a
evalArb(Node Add e1 e2) = evalArb e1 + evalArb e2 
evalArb(Node Mult e1 e2) = evalArb e1 * evalArb e2 


-- arb1 = Node Add (Node Mult (Lf 2) (Lf 3)) (Node Mult (Lf 0)(Lf 5))
-- arb2 = Node Mult (Lf 2) (Node Add (Lf 3)(Lf 4))
-- arb3 = Node Add (Lf 4) (Node Mult (Lf 3)(Lf 3))
-- arb4 = Node Mult (Node Mult (Node Mult (Lf 1) (Lf 2)) (Node Add (Lf 3)(Lf 1))) (Lf 2)

-- test21 = evalArb arb1 == 6
-- test22 = evalArb arb2 == 14
-- test23 = evalArb arb3 == 13
-- test24 = evalArb arb4 == 16

--1.4)
expToArb :: Expr -> Tree
expToArb (Const c) = Lf c
expToArb (e1 :+: e2) = Node Add (expToArb e1) (expToArb e2)
expToArb (e1 :*: e2) = Node Mult (expToArb e1) (expToArb e2)


class Collection c where
  empty :: c key value
  singleton :: key -> value -> c key value
  insert
      :: Ord key
      => key -> value -> c key value -> c key value
  clookup :: Ord key => key -> c key value -> Maybe value
  delete :: Ord key => key -> c key value -> c key value
  keys :: c key value -> [key]
  values :: c key value -> [value]
  toList :: c key value -> [(key, value)]
  fromList :: Ord key => [(key,value)] -> c key value

  
  keys c = map fst (toList c)
  values c = map snd (toList c)

  fromList [] = empty
  fromList ((cheie,valoare):xs) = insert cheie valoare (fromList xs) --inseram cheia si valoarea in lista 

--2.2)
newtype PairList k v
  = PairList { getPairList :: [(k, v)] }

instance Collection PairList where
 empty :: PairList key value
 empty = PairList []
 toList :: PairList key value -> [(key,value)]
 toList = getPairList
 insert k v (PairList ls) = PairList $ (k,v):filter((/=k).fst) ls
 clookup k (PairList l) = lookup k l
 --delete k (PairList l)=PairList$ filter((/=k).fst) l
 



data SearchTree key value
  = Empty
  | BNode
      (SearchTree key value) -- elemente cu cheia mai mica
      key                    -- cheia elementului
      (Maybe value)          -- valoarea elementului
      (SearchTree key value) -- elemente cu cheia mai mare

instance Collection SearchTree where
    empty = Empty
    singleton k v = BNode Empty k (Just v) Empty
    insert k v Empty = singleton k v
    insert k v (BNode a cheie valoare b) = if k <= cheie then (BNode (insert k v a) cheie valoare b)
                                          else  (BNode a cheie valoare (insert k v b))
    clookup k Empty = Nothing
    clookup k (BNode a cheie valoare b) = if k == cheie then valoare
                                        else if k < cheie then (clookup k a)
                                            else (clookup k b)

  
    toList Empty = []
    toList (BNode a cheie valoare b) = case valoare of 
                                        Nothing -> (toList a) ++ (toList b) 
                                        Just x -> (toList a) ++ [(cheie, x)] ++ (toList b) 








LAB8

import Text.Parsec (parse)
import System.Win32 (xBUTTON1, SECURITY_ATTRIBUTES (bInheritHandle))

data Punct = Pt [Int]

data Arb = Vid | F Int | N Arb Arb
          deriving Show

class ToFromArb a where
 	    toArb :: a -> Arb
	    fromArb :: Arb -> a

--1) a)
instance Show Punct where 
  show(Pt l)="(" ++ parse l ++ ")"
   where 
    parse [] = ""
    parse [x] = show x
    parse (x:xs) = show x ++ "," ++ parse xs


--b)
instance ToFromArb Punct where
  toArb :: Punct -> Arb
  toArb (Pt []) = Vid
  toArb (Pt (x:xs)) = N(F x) (toArb (Pt xs))

  fromArb::Arb -> Punct
  fromArb Vid = Pt []
  fromArb (F x) = Pt [x] 
  fromArb (N l r) = Pt(l1 ++ l2)
    where 
      Pt l1 = fromArb l
      Pt l2 = fromArb r

-- Pt [1,2,3]
-- (1, 2, 3)

-- Pt []
-- ()

-- toArb (Pt [1,2,3])
-- N (F 1) (N (F 2) (N (F 3) Vid))
-- fromArb $ N (F 1) (N (F 2) (N (F 3) Vid)) :: Punct
--  (1,2,3)

{-
instance ToFromArb Punct where
    toArb(Pt []) = Vid
    toArb(Pt (x:xs)) = N(F x) (toArb (Pt xs))

    fromArb Vid = Pt []
    fromArb (F x)= Pt [x]
    fromArb (N (F left) (F right)) = Pt[left, right]
-}

data Geo a = Square a | Rectangle a a | Circle a
    deriving Show

class GeoOps g where
  perimeter :: (Floating a) => g a -> a
  area :: (Floating a) =>  g a -> a

-- ghci> pi
-- 3.141592653589793

--2) a)
instance GeoOps Geo where
  perimeter(Square a) = 4*a
  perimeter(Rectangle a b) = 2*(a+b)
  perimeter (Circle a) = 2*pi*a

  area (Square a) = a*a
  area (Rectangle a b) = a*b
  area (Circle a) = pi*a*a

--b)
instance (Floating a, Eq a) => Eq(Geo a) where
  a==b = perimeter(a) == perimeter (b)







LAB10


{-
class Functor f where
fmap : : ( a -> b ) -> f a -> f b
-}
newtype Identity a = Identity a

data Pair a = Pair a a

data Constant a b = Constant b

data Two a b = Two a b

data Three a b c = Three a b c

data Three' a b = Three' a b b


data Four a b c d = Four a b c d

data Four'' a b = Four'' a a a b

data Quant a b = Finance | Desk a | Bloor b


data LiftItOut f a = LiftItOut (f a)

data Parappa f g a = DaWrappa (f a) (g a)

data IgnoreOne f g a b = IgnoringSomething (f a) (g b)

data Notorious g o a t = Notorious (g o) (g a) (g t)

data GoatLord a = NoGoat | OneGoat a | MoreGoats (GoatLord a) (GoatLord a) (GoatLord a)

data TalkToMe a = Halt | Print String a | Read (String -> a)


----------------------------------------------------------------------------------------------------------------------

instance Functor Identity where
    fmap :: (a -> b) -> Identity a -> Identity b
    fmap f (Identity x) = (Identity (f x))

instance Functor Pair where 
    fmap :: (a->b) -> Pair a -> Pair b
    fmap f (Pair a b) = Pair (f a) (f b)

--data Constant a b = Constant b
--     Constant `x` :: Constant Int Char
--     Constant `x` :: Constant Bool Char
    
instance Functor (Constant a) where
    fmap f (Constant b) = Constant (f b)

instance Functor (Two a) where
    fmap f (Two a b) = Two a (f b)

instance Functor (Three a b) where
    fmap f(Three a b c) = Three a b (f c)

instance Functor (Three' a) where
    fmap f(Three' a b b1) = Three' a (f b) (f b1)

instance Functor (Four a b c) where
    fmap f(Four a b c d) = Four a b c (f d)

instance Functor (Four'' a) where
    fmap f(Four'' a1 a2 a3 b) = Four'' a1 a2 a3 (f b)

instance Functor (Quant a) where
    fmap f Finance = Finance
    fmap f (Desk a) = Desk a
    fmap f (Bloor b) = Bloor (f b)

-- aToB e functie

instance Functor f => Functor (LiftItOut f) where
    fmap aToB (LiftItOut fA) = LiftItOut (fmap aToB fA)
    
--data Parappa f g a = DaWrappa (f a) (g a)

instance (Functor f, Functor g) => Functor (Parappa f g ) where
    fmap aToB (DaWrappa fA gA) = DaWrappa (fmap aToB fA) (fmap aToB gA)

instance (Functor f, Functor g) => Functor (IgnoreOne f g a) where
    fmap aToB (IgnoringSomething fA gB) = IgnoringSomething fA (fmap aToB gB)

instance Functor g => Functor (Notorious g o a) where
    fmap fct (Notorious gO gA gT) = Notorious gO gA (fmap fct gT)








LAB11

{- 
class Functor f where 
     fmap :: (a -> b) -> f a -> f b 
class Functor f => Applicative f where
    pure :: a -> f a
    (<*>) :: f (a -> b) -> f a -> f b

Just length <*> Just "world"

Just (++" world") <*> Just "hello,"
pure (+) <*> Just 3 <*> Just 5
pure (+) <*> Just 3 <*> Nothing
(++) <$> ["ha","heh"] <*> ["?","!"]
-}
data List a = Nil
            | Cons a (List a)
        deriving (Eq, Show)

-- fmap f [] = []
-- fmap f (x:xs) = f x :fmap f xs
instance Functor List where
    fmap f Nil = Nil 
    fmap f (Cons a b)= Cons (f a) (fmap f b)

app :: List a -> List a -> List a
app Nil ls = ls
app (Cons a as) ls = Cons a (app as ls)

instance Applicative List where
    pure :: a -> List a
    pure a = Cons a Nil

    (<*>) :: List (a -> b) -> List a -> List b
    (<*>) Nil ls = Nil --Nil <*> ls
    (<*>) (Cons a as) ls = (fmap a ls) `app` ((<*>) as ls)

f = Cons (+1) (Cons (*2) Nil)
v = Cons 1 (Cons 2 Nil)
test1 = (f <*> v) == Cons 2 (Cons 3 (Cons 2 (Cons 4 Nil)))

data Cow = Cow {
        name :: String
        , age :: Int
        , weight :: Int
        } deriving (Eq, Show)

noEmpty :: String -> Maybe String
noEmpty "" = Nothing
noEmpty str = Just str

noNegative :: Int -> Maybe Int
noNegative x 
    |x<0 = Nothing
    |otherwise = Just x

test21 = noEmpty "abc" == Just "abc"
test22 = noNegative (-5) == Nothing 
test23 = noNegative 5 == Just 5 
--b)
cowFromString :: String -> Int -> Int -> Maybe Cow
-- cowFromString name age weight
--     |noEmpty name == Nothing  =  Nothing
--     |noNegative age == Nothing  =  Nothing
--     |noNegative weight == Nothing  = Nothing
--     |otherwise = Just Cow {name, age, weight}


test24 = cowFromString "Milka" 5 100 == Just (Cow {name = "Milka", age = 5, weight = 100})

--c)

 
cowFromString name age weight = 
    fmap Cow (noEmpty name) <*> noNegative age <*> noNegative weight


newtype Name = Name String deriving (Eq, Show)
newtype Address = Address String deriving (Eq, Show)

data Person = Person Name Address
    deriving (Eq, Show)

validateLength :: Int -> String -> Maybe String
validateLength x str
    |x< length (str) = Nothing
    |otherwise = Just str

test31 = validateLength 5 "abc" == Just "abc"

mkName :: String -> Maybe Name
mkName str 
    |validateLength 25 str == Nothing = Nothing
    |otherwise = Just(Name str)


mkAddress :: String -> Maybe Address
mkAddress str 
    |validateLength 100 str == Nothing = Nothing
    |otherwise = Just(Address str)

test32 = mkName "Gigel" ==  Just (Name "Gigel")
test33 = mkAddress "Str Academiei" ==  Just (Address "Str Academiei")

--mkPerson :: String -> String -> Maybe Person
--mkPerson str1 str2 = fmap Person (validateLength 25 str1) <*> validateLength 100 str2

    -- |validateLength 25 str1 == Nothing = Nothing
    -- |validateLength 100 str2 == Nothing = Nothing
    -- |otherwise = Just(Person (Name str1) (Address str2))

test34 = mkPerson "Gigel" "Str Academiei" == Just (Person (Name "Gigel") (Address "Str Academiei"))






LAB12

import Data.Monoid

elem1 :: (Foldable t, Eq a) => a -> t a -> Bool
elem1 elem obj = foldr (\x y -> y || (elem == x)) False obj

null1 :: (Foldable t) => t a -> Bool
null1 obj = foldr (\x y -> False) True obj

length1 :: (Foldable t) => t a -> Int
length1 obj = foldr (\x y -> y + 1) 0 obj

toList1 :: (Foldable t) => t a -> [a]
toList1 obj = foldl (\x y -> x ++ [y]) [] obj

fold1 :: (Foldable t, Monoid m) => t m -> m
fold1 obj = foldMap id obj

data Constant a b = Constant b
instance Foldable (Constant a) where
    foldMap mon (Constant x) = mon x

data Two a b = Two a b
instance Foldable (Two a) where
    foldMap mon (Two x y) = mon y

data Three a b c = Three a b c
instance Foldable (Three a b) where
    foldMap mon (Three x y z) = mon z

data Three' a b = Three' a b b
instance Foldable (Three' a) where
    foldMap mon (Three' x y z) = (mon y) <> (mon z)

data Four' a b = Four' a b b b
instance Foldable (Four' a) where
    foldMap mon (Four' x y z t) = (mon y) <> (mon z) <> (mon t)

data GoatLord a = NoGoat | OneGoat a | MoreGoats (GoatLord a) (GoatLord a) (GoatLord a)
instance Foldable (GoatLord) where
    foldMap mon NoGoat = mempty
    foldMap mon (OneGoat x) = mon x
    foldMap mon (MoreGoats a b c) = (foldMap mon a) <> (foldMap mon b) <> (foldMap mon c) 





LAB13

pos :: Int -> Bool
pos  x = if (x>=0) then True else False

fct :: Maybe Int ->  Maybe Bool
--fct  mx =  mx  >>= (\x -> Just (pos x))
fct mx = do
  x <- mx
  return (pos x)

addM :: Maybe Int -> Maybe Int -> Maybe Int
addM mx my = do 
  a <- mx
  b <- my
  return (a + b)

addMm :: Maybe Int -> Maybe Int -> Maybe Int
addMm Nothing a = a
addMm b Nothing = b
addMm (Just a) (Just b) = Just (a + b)

--cartesian_product xs ys = xs >>= ( \x -> (ys >>= \y-> return (x,y)))
cartesian_product xs ys = do
  x <- xs
  y <- ys
  return (x, y)

--prod f xs ys = [f x y | x <- xs, y<-ys]
prod f xs ys = do
  x <- xs
  y <- ys
  return (f x y)

{-
myGetLine :: IO String
myGetLine = getChar >>= \x ->
      if x == '\n' then
          return []
      else
          myGetLine >>= \xs -> return (x:xs)
-}
myGetLine :: IO String
myGetLine = do
    x <- getChar
    if x == '\n' then
      return []
    else do
      b <- myGetLine
      return (x:b)
      
prelNo noin =  sqrt noin

{-
ioNumber = do
     noin  <- readLn :: IO Float
     putStrLn $ "Intrare\n" ++ (show noin)
     let  noout = prelNo noin
     putStrLn $ "Iesire"
     print noout
-}

ioNumber = (readLn :: (IO Float)) >>= \noin -> putStrLn("Intrare\n" ++ (show noin)) >> return (prelNo noin) >>= \noout -> putStrLn "Iesire" >> print noout


newtype WriterS a = Writer { runWriter :: (a, [String]) } 


instance  Monad WriterS where
  return va = Writer (va, [])
  ma >>= k = let (va, log1) = runWriter ma
                 (vb, log2) = runWriter (k va)
             in  Writer (vb, log1 ++ log2)


instance  Applicative WriterS where
  pure = return
  mf <*> ma = do
    f <- mf
    a <- ma
    return (f a)       

instance  Functor WriterS where              
  fmap f ma = pure f <*> ma     

tell :: [String] -> WriterS () 
tell log = Writer ((), log)
  
logIncrement :: Int  -> WriterS Int
logIncrement x = do
        tell ( ["increment:" ++ show x ++ "\n"] )
        return (x + 1)

logIncrement2 :: Int -> WriterS Int
logIncrement2 x = do
          y <- logIncrement x
          logIncrement y

logIncrementN :: Int -> Int -> WriterS Int
logIncrementN x n =  if n == 1 
                        then logIncrement x
                        else do
                          y <- logIncrement x
                          logIncrementN y (n - 1)
                      

data Person = Person { name :: String, age :: Int }

showPersonN :: Person -> String
showPersonN (Person name _) = "NAME: " ++ name
showPersonA :: Person -> String
showPersonA (Person _ age) = "AGE: " ++ show age

showPerson :: Person -> String
showPerson person = "(" ++ (showPersonN person) ++ ", " ++ (showPersonA person) ++ ")"

newtype Reader env a = Reader { runReader :: env -> a }

ask :: Reader env env
ask = Reader id

instance Monad (Reader env) where
  return x = Reader (\_ -> x)
  ma >>= k = Reader f
    where f env = let a = runReader ma env
                  in  runReader (k a) env

instance Applicative (Reader env) where
  pure = return
  mf <*> ma = do
    f <- mf
    a <- ma
    return (f a)       

instance Functor (Reader env) where              
  fmap f ma = pure f <*> ma    

mshowPersonN ::  Reader Person String
mshowPersonN = do
          (Person name _) <- ask
          return ("NAME: " ++ name)
mshowPersonA ::  Reader Person String
mshowPersonA = do
          (Person _ age) <- ask
          return ("AGE: " ++ show age) 
mshowPerson ::  Reader Person String
mshowPerson = do
          name <- mshowPersonN
          age <- mshowPersonA
          return ("(" ++ name ++ ", " ++ age ++ ")") 